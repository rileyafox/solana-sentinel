// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1/sentinel.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SentinelService_GetTransactions_FullMethodName = "/sentinel.v1.SentinelService/GetTransactions"
	SentinelService_StreamEvents_FullMethodName    = "/sentinel.v1.SentinelService/StreamEvents"
)

// SentinelServiceClient is the client API for SentinelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SentinelServiceClient interface {
	GetTransactions(ctx context.Context, in *GetTxsRequest, opts ...grpc.CallOption) (*GetTxsResponse, error)
	// grpc-gateway will stream this back as chunked JSON
	StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error)
}

type sentinelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSentinelServiceClient(cc grpc.ClientConnInterface) SentinelServiceClient {
	return &sentinelServiceClient{cc}
}

func (c *sentinelServiceClient) GetTransactions(ctx context.Context, in *GetTxsRequest, opts ...grpc.CallOption) (*GetTxsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTxsResponse)
	err := c.cc.Invoke(ctx, SentinelService_GetTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sentinelServiceClient) StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SentinelService_ServiceDesc.Streams[0], SentinelService_StreamEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamEventsRequest, Event]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SentinelService_StreamEventsClient = grpc.ServerStreamingClient[Event]

// SentinelServiceServer is the server API for SentinelService service.
// All implementations must embed UnimplementedSentinelServiceServer
// for forward compatibility.
type SentinelServiceServer interface {
	GetTransactions(context.Context, *GetTxsRequest) (*GetTxsResponse, error)
	// grpc-gateway will stream this back as chunked JSON
	StreamEvents(*StreamEventsRequest, grpc.ServerStreamingServer[Event]) error
	mustEmbedUnimplementedSentinelServiceServer()
}

// UnimplementedSentinelServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSentinelServiceServer struct{}

func (UnimplementedSentinelServiceServer) GetTransactions(context.Context, *GetTxsRequest) (*GetTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedSentinelServiceServer) StreamEvents(*StreamEventsRequest, grpc.ServerStreamingServer[Event]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedSentinelServiceServer) mustEmbedUnimplementedSentinelServiceServer() {}
func (UnimplementedSentinelServiceServer) testEmbeddedByValue()                         {}

// UnsafeSentinelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SentinelServiceServer will
// result in compilation errors.
type UnsafeSentinelServiceServer interface {
	mustEmbedUnimplementedSentinelServiceServer()
}

func RegisterSentinelServiceServer(s grpc.ServiceRegistrar, srv SentinelServiceServer) {
	// If the following call pancis, it indicates UnimplementedSentinelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SentinelService_ServiceDesc, srv)
}

func _SentinelService_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentinelServiceServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SentinelService_GetTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentinelServiceServer).GetTransactions(ctx, req.(*GetTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SentinelService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SentinelServiceServer).StreamEvents(m, &grpc.GenericServerStream[StreamEventsRequest, Event]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SentinelService_StreamEventsServer = grpc.ServerStreamingServer[Event]

// SentinelService_ServiceDesc is the grpc.ServiceDesc for SentinelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SentinelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sentinel.v1.SentinelService",
	HandlerType: (*SentinelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransactions",
			Handler:    _SentinelService_GetTransactions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _SentinelService_StreamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/sentinel.proto",
}
